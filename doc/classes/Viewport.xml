<?xml version="1.0" encoding="UTF-8" ?>
<class name="Viewport" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Abstract base class for viewports. Encapsulates drawing and interaction with a game world.
	</brief_description>
	<description>
		A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera3D 3D nodes will render on it too.
		Optionally, a viewport can have its own 2D or 3D world, so it doesn't share what it draws with other viewports.
		Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.
		Also, viewports can be assigned to different screens in case the devices have multiple screens.
		Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
	</description>
	<tutorials>
		<link title="Using Viewports">$DOCS_URL/tutorials/rendering/viewports.html</link>
		<link title="Viewport and canvas transforms">$DOCS_URL/tutorials/2d/2d_transforms.html</link>
		<link title="Screen Capture Demo">https://godotengine.org/asset-library/asset/130</link>
		<link title="Dynamic Split Screen Demo">https://godotengine.org/asset-library/asset/541</link>
	</tutorials>
	<methods>
		<method name="find_world_2d" qualifiers="const">
			<return type="World2D" />
			<description>
				Returns the first valid [World2D] for this viewport, searching the [member world_2d] property of itself and any Viewport ancestor.
			</description>
		</method>
		<method name="get_camera_2d" qualifiers="const">
			<return type="Camera2D" />
			<description>
				Returns the currently active 2D camera. Returns null if there are no active cameras.
			</description>
		</method>
		<method name="get_canvas_cull_mask_bit" qualifiers="const">
			<return type="bool" />
			<param index="0" name="layer" type="int" />
			<description>
				Returns an individual bit on the rendering layer mask.
			</description>
		</method>
		<method name="get_embedded_subwindows" qualifiers="const">
			<return type="Window[]" />
			<description>
				Returns a list of the visible embedded [Window]s inside the viewport.
				[b]Note:[/b] [Window]s inside other viewports will not be listed.
			</description>
		</method>
		<method name="get_final_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the transform from the viewport's coordinate system to the embedder's coordinate system.
			</description>
		</method>
		<method name="get_mouse_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the mouse's position in this [Viewport] using the coordinate system of this [Viewport].
			</description>
		</method>
		<method name="get_render_info">
			<return type="int" />
			<param index="0" name="type" type="int" enum="Viewport.RenderInfoType" />
			<param index="1" name="info" type="int" enum="Viewport.RenderInfo" />
			<description>
				Returns rendering statistics of the given type. See [enum RenderInfoType] and [enum RenderInfo] for options.
			</description>
		</method>
		<method name="get_screen_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the transform from the Viewport's coordinates to the screen coordinates of the containing window manager window.
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="ViewportTexture" />
			<description>
				Returns the viewport's texture.
				[b]Note:[/b] When trying to store the current texture (e.g. in a file), it might be completely black or outdated if used too early, especially when used in e.g. [method Node._ready]. To make sure the texture you get is correct, you can await [signal RenderingServer.frame_post_draw] signal.
				[codeblock]
				func _ready():
				    await RenderingServer.frame_post_draw
				    $Viewport.get_texture().get_image().save_png("user://Screenshot.png")
				[/codeblock]
			</description>
		</method>
		<method name="get_viewport_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the viewport's RID from the [RenderingServer].
			</description>
		</method>
		<method name="get_visible_rect" qualifiers="const">
			<return type="Rect2" />
			<description>
				Returns the visible rectangle in global screen coordinates.
			</description>
		</method>
		<method name="gui_get_drag_data" qualifiers="const">
			<return type="Variant" />
			<description>
				Returns the drag data from the GUI, that was previously returned by [method Control._get_drag_data].
			</description>
		</method>
		<method name="gui_get_focus_owner" qualifiers="const">
			<return type="Control" />
			<description>
				Returns the [Control] having the focus within this viewport. If no [Control] has the focus, returns null.
			</description>
		</method>
		<method name="gui_is_drag_successful" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the drag operation is successful.
			</description>
		</method>
		<method name="gui_is_dragging" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the viewport is currently performing a drag operation.
				Alternative to [constant Node.NOTIFICATION_DRAG_BEGIN] and [constant Node.NOTIFICATION_DRAG_END] when you prefer polling the value.
			</description>
		</method>
		<method name="gui_release_focus">
			<return type="void" />
			<description>
				Removes the focus from the currently focused [Control] within this viewport. If no [Control] has the focus, does nothing.
			</description>
		</method>
		<method name="is_input_handled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns whether the current [InputEvent] has been handled. Input events are not handled until [method set_input_as_handled] has been called during the lifetime of an [InputEvent].
				This is usually done as part of input handling methods like [method Node._input], [method Control._gui_input] or others, as well as in corresponding signal handlers.
				If [member handle_input_locally] is set to [code]false[/code], this method will try finding the first parent viewport that is set to handle input locally, and return its value for [method is_input_handled] instead.
			</description>
		</method>
		<method name="push_input">
			<return type="void" />
			<param index="0" name="event" type="InputEvent" />
			<param index="1" name="in_local_coords" type="bool" default="false" />
			<description>
				Triggers the given [param event] in this [Viewport]. This can be used to pass an [InputEvent] between viewports, or to locally apply inputs that were sent over the network or saved to a file.
				If [param in_local_coords] is [code]false[/code], the event's position is in the embedder's coordinates and will be converted to viewport coordinates. If [param in_local_coords] is [code]true[/code], the event's position is in viewport coordinates.
				While this method serves a similar purpose as [method Input.parse_input_event], it does not remap the specified [param event] based on project settings like [member ProjectSettings.input_devices/pointing/emulate_touch_from_mouse].
				Calling this method will propagate calls to child nodes for following methods in the given order:
				- [method Node._input]
				- [method Control._gui_input] for [Control] nodes
				- [method Node._shortcut_input]
				- [method Node._unhandled_key_input]
				- [method Node._unhandled_input]
				If an earlier method marks the input as handled via [method set_input_as_handled], any later method in this list will not be called.
				If none of the methods handle the event and [member physics_object_picking] is [code]true[/code], the event is used for physics object picking.
			</description>
		</method>
		<method name="push_text_input">
			<return type="void" />
			<param index="0" name="text" type="String" />
			<description>
				Helper method which calls the [code]set_text()[/code] method on the currently focused [Control], provided that it is defined (e.g. if the focused Control is [Button] or [LineEdit]).
			</description>
		</method>
		<method name="push_unhandled_input" is_deprecated="true">
			<return type="void" />
			<param index="0" name="event" type="InputEvent" />
			<param index="1" name="in_local_coords" type="bool" default="false" />
			<description>
				Triggers the given [InputEvent] in this [Viewport]. This can be used to pass input events between viewports, or to locally apply inputs that were sent over the network or saved to a file.
				If [param in_local_coords] is [code]false[/code], the event's position is in the embedder's coordinates and will be converted to viewport coordinates. If [param in_local_coords] is [code]true[/code], the event's position is in viewport coordinates.
				While this method serves a similar purpose as [method Input.parse_input_event], it does not remap the specified [param event] based on project settings like [member ProjectSettings.input_devices/pointing/emulate_touch_from_mouse].
				Calling this method will propagate calls to child nodes for following methods in the given order:
				- [method Node._shortcut_input]
				- [method Node._unhandled_key_input]
				- [method Node._unhandled_input]
				If an earlier method marks the input as handled via [method set_input_as_handled], any later method in this list will not be called.
				If none of the methods handle the event and [member physics_object_picking] is [code]true[/code], the event is used for physics object picking.
				[b]Note:[/b] This method doesn't propagate input events to embedded [Window]s or [SubViewport]s.
				[i]Deprecated.[/i] Use [method push_input] instead.
			</description>
		</method>
		<method name="set_canvas_cull_mask_bit">
			<return type="void" />
			<param index="0" name="layer" type="int" />
			<param index="1" name="enable" type="bool" />
			<description>
				Set/clear individual bits on the rendering layer mask. This simplifies editing this [Viewport]'s layers.
			</description>
		</method>
		<method name="set_input_as_handled">
			<return type="void" />
			<description>
				Stops the input from propagating further down the [SceneTree].
				[b]Note:[/b] This does not affect the methods in [Input], only the way events are propagated.
			</description>
		</method>
		<method name="update_mouse_cursor_state">
			<return type="void" />
			<description>
				Force instantly updating the display based on the current mouse cursor position. This includes updating the mouse cursor shape and sending necessary [signal Control.mouse_entered], [signal CollisionObject2D.mouse_entered], [signal CollisionObject3D.mouse_entered] and [signal Window.mouse_entered] signals and their respective [code]mouse_exited[/code] counterparts.
			</description>
		</method>
		<method name="warp_mouse">
			<return type="void" />
			<param index="0" name="position" type="Vector2" />
			<description>
				Moves the mouse pointer to the specified position in this [Viewport] using the coordinate system of this [Viewport].
				[b]Note:[/b] [method warp_mouse] is only supported on Windows, macOS and Linux. It has no effect on Android, iOS and Web.
			</description>
		</method>
	</methods>
	<members>
		<member name="audio_listener_enable_2d" type="bool" setter="set_as_audio_listener_2d" getter="is_audio_listener_2d" default="false">
			If [code]true[/code], the viewport will process 2D audio streams.
		</member>
		<member name="canvas_cull_mask" type="int" setter="set_canvas_cull_mask" getter="get_canvas_cull_mask" default="4294967295">
			The rendering layers in which this [Viewport] renders [CanvasItem] nodes.
		</member>
		<member name="canvas_item_default_texture_filter" type="int" setter="set_default_canvas_item_texture_filter" getter="get_default_canvas_item_texture_filter" enum="Viewport.DefaultCanvasItemTextureFilter" default="1">
			Sets the default filter mode used by [CanvasItem]s in this Viewport. See [enum DefaultCanvasItemTextureFilter] for options.
		</member>
		<member name="canvas_item_default_texture_repeat" type="int" setter="set_default_canvas_item_texture_repeat" getter="get_default_canvas_item_texture_repeat" enum="Viewport.DefaultCanvasItemTextureRepeat" default="0">
			Sets the default repeat mode used by [CanvasItem]s in this Viewport. See [enum DefaultCanvasItemTextureRepeat] for options.
		</member>
		<member name="canvas_transform" type="Transform2D" setter="set_canvas_transform" getter="get_canvas_transform">
			The canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]s. This is relative to the global canvas transform of the viewport.
		</member>
		<member name="debug_draw" type="int" setter="set_debug_draw" getter="get_debug_draw" enum="Viewport.DebugDraw" default="0">
			The overlay mode for test rendered geometry in debug purposes.
		</member>
		<member name="global_canvas_transform" type="Transform2D" setter="set_global_canvas_transform" getter="get_global_canvas_transform">
			The global canvas transform of the viewport. The canvas transform is relative to this.
		</member>
		<member name="gui_disable_input" type="bool" setter="set_disable_input" getter="is_input_disabled" default="false">
			If [code]true[/code], the viewport will not receive input events.
		</member>
		<member name="gui_embed_subwindows" type="bool" setter="set_embedding_subwindows" getter="is_embedding_subwindows" default="false">
			If [code]true[/code], sub-windows (popups and dialogs) will be embedded inside application window as control-like nodes. If [code]false[/code], they will appear as separate windows handled by the operating system.
		</member>
		<member name="gui_snap_controls_to_pixels" type="bool" setter="set_snap_controls_to_pixels" getter="is_snap_controls_to_pixels_enabled" default="true">
			If [code]true[/code], the GUI controls on the viewport will lay pixel perfectly.
		</member>
		<member name="handle_input_locally" type="bool" setter="set_handle_input_locally" getter="is_handling_input_locally" default="true">
			If [code]true[/code], this viewport will mark incoming input events as handled by itself. If [code]false[/code], this is instead done by the first parent viewport that is set to handle input locally.
			A [SubViewportContainer] will automatically set this property to [code]false[/code] for the [Viewport] contained inside of it.
			See also [method set_input_as_handled] and [method is_input_handled].
		</member>
		<member name="msaa_2d" type="int" setter="set_msaa_2d" getter="get_msaa_2d" enum="Viewport.MSAA" default="0">
			The multisample anti-aliasing mode for 2D/Canvas rendering. A higher number results in smoother edges at the cost of significantly worse performance. A value of 2 or 4 is best unless targeting very high-end systems. This has no effect on shader-induced aliasing or texture aliasing.
		</member>
		<member name="physics_object_picking" type="bool" setter="set_physics_object_picking" getter="get_physics_object_picking" default="false">
			If [code]true[/code], the objects rendered by viewport become subjects of mouse picking process.
			[b]Note:[/b] The number of simultaneously pickable objects is limited to 64 and they are selected in a non-deterministic order, which can be different in each picking process.
		</member>
		<member name="physics_object_picking_sort" type="bool" setter="set_physics_object_picking_sort" getter="get_physics_object_picking_sort" default="false">
			If [code]true[/code], objects receive mouse picking events sorted primarily by their [member CanvasItem.z_index] and secondarily by their position in the scene tree. If [code]false[/code], the order is undetermined.
			[b]Note:[/b] This setting is disabled by default because of its potential expensive computational cost.
			[b]Note:[/b] Sorting happens after selecting the pickable objects. Because of the limitation of 64 simultaneously pickable objects, it is not guaranteed that the object with the highest [member CanvasItem.z_index] receives the picking event.
		</member>
		<member name="sdf_oversize" type="int" setter="set_sdf_oversize" getter="get_sdf_oversize" enum="Viewport.SDFOversize" default="1">
		</member>
		<member name="sdf_scale" type="int" setter="set_sdf_scale" getter="get_sdf_scale" enum="Viewport.SDFScale" default="1">
		</member>
		<member name="snap_2d_transforms_to_pixel" type="bool" setter="set_snap_2d_transforms_to_pixel" getter="is_snap_2d_transforms_to_pixel_enabled" default="false">
		</member>
		<member name="snap_2d_vertices_to_pixel" type="bool" setter="set_snap_2d_vertices_to_pixel" getter="is_snap_2d_vertices_to_pixel_enabled" default="false">
		</member>
		<member name="transparent_bg" type="bool" setter="set_transparent_background" getter="has_transparent_background" default="false">
			If [code]true[/code], the viewport should render its background as transparent.
		</member>
		<member name="world_2d" type="World2D" setter="set_world_2d" getter="get_world_2d">
			The custom [World2D] which can be used as 2D environment source.
		</member>
	</members>
	<signals>
		<signal name="gui_focus_changed">
			<param index="0" name="node" type="Control" />
			<description>
				Emitted when a Control node grabs keyboard focus.
			</description>
		</signal>
		<signal name="size_changed">
			<description>
				Emitted when the size of the viewport is changed, whether by resizing of window, or some other means.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MSAA_DISABLED" value="0" enum="MSAA">
			Multisample antialiasing mode disabled. This is the default value, and is also the fastest setting.
		</constant>
		<constant name="MSAA_2X" value="1" enum="MSAA">
			Use 2× Multisample Antialiasing. This has a moderate performance cost. It helps reduce aliasing noticeably, but 4× MSAA still looks substantially better.
		</constant>
		<constant name="MSAA_4X" value="2" enum="MSAA">
			Use 4× Multisample Antialiasing. This has a significant performance cost, and is generally a good compromise between performance and quality.
		</constant>
		<constant name="MSAA_8X" value="3" enum="MSAA">
			Use 8× Multisample Antialiasing. This has a very high performance cost. The difference between 4× and 8× MSAA may not always be visible in real gameplay conditions. Likely unsupported on low-end and older hardware.
		</constant>
		<constant name="MSAA_MAX" value="4" enum="MSAA">
			Represents the size of the [enum MSAA] enum.
		</constant>
		<constant name="SCREEN_SPACE_AA_DISABLED" value="0" enum="ScreenSpaceAA">
			Do not perform any antialiasing in the full screen post-process.
		</constant>
		<constant name="SCREEN_SPACE_AA_FXAA" value="1" enum="ScreenSpaceAA">
			Use fast approximate antialiasing. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K.
		</constant>
		<constant name="SCREEN_SPACE_AA_MAX" value="2" enum="ScreenSpaceAA">
			Represents the size of the [enum ScreenSpaceAA] enum.
		</constant>
		<constant name="RENDER_INFO_OBJECTS_IN_FRAME" value="0" enum="RenderInfo">
			Amount of objects in frame.
		</constant>
		<constant name="RENDER_INFO_PRIMITIVES_IN_FRAME" value="1" enum="RenderInfo">
			Amount of vertices in frame.
		</constant>
		<constant name="RENDER_INFO_DRAW_CALLS_IN_FRAME" value="2" enum="RenderInfo">
			Amount of draw calls in frame.
		</constant>
		<constant name="RENDER_INFO_MAX" value="3" enum="RenderInfo">
			Represents the size of the [enum RenderInfo] enum.
		</constant>
		<constant name="RENDER_INFO_TYPE_VISIBLE" value="0" enum="RenderInfoType">
		</constant>
		<constant name="RENDER_INFO_TYPE_SHADOW" value="1" enum="RenderInfoType">
		</constant>
		<constant name="RENDER_INFO_TYPE_MAX" value="2" enum="RenderInfoType">
		</constant>
		<constant name="DEBUG_DRAW_DISABLED" value="0" enum="DebugDraw">
			Objects are displayed normally.
		</constant>
		<constant name="DEBUG_DRAW_UNSHADED" value="1" enum="DebugDraw">
			Objects are displayed without light information.
		</constant>
		<constant name="DEBUG_DRAW_LIGHTING" value="2" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_OVERDRAW" value="3" enum="DebugDraw">
			Objects are displayed semi-transparent with additive blending so you can see where they are drawing over top of one another. A higher overdraw means you are wasting performance on drawing pixels that are being hidden behind others.
		</constant>
		<constant name="DEBUG_DRAW_WIREFRAME" value="4" enum="DebugDraw">
			Objects are displayed in wireframe style.
		</constant>
		<constant name="DEBUG_DRAW_NORMAL_BUFFER" value="5" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_SCENE_LUMINANCE" value="6" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_SSAO" value="7" enum="DebugDraw">
			Draws the screen-space ambient occlusion texture instead of the scene so that you can clearly see how it is affecting objects. In order for this display mode to work, you must have [member Environment.ssao_enabled] set in your [WorldEnvironment].
		</constant>
		<constant name="DEBUG_DRAW_SSIL" value="8" enum="DebugDraw">
			Draws the screen-space indirect lighting texture instead of the scene so that you can clearly see how it is affecting objects. In order for this display mode to work, you must have [member Environment.ssil_enabled] set in your [WorldEnvironment].
		</constant>
		<constant name="DEBUG_DRAW_PSSM_SPLITS" value="9" enum="DebugDraw">
			Colors each PSSM split for the [DirectionalLight3D]s in the scene a different color so you can see where the splits are. In order, they will be colored red, green, blue, and yellow.
		</constant>
		<constant name="DEBUG_DRAW_DECAL_ATLAS" value="10" enum="DebugDraw">
			Draws the decal atlas used by [Decal]s and light projector textures in the upper left quadrant of the [Viewport].
		</constant>
		<constant name="DEBUG_DRAW_SDFGI" value="11" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_SDFGI_PROBES" value="12" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_DISABLE_LOD" value="13" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_CLUSTER_OMNI_LIGHTS" value="14" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_CLUSTER_SPOT_LIGHTS" value="15" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_CLUSTER_DECALS" value="16" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_OCCLUDERS" value="17" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_MOTION_VECTORS" value="18" enum="DebugDraw">
		</constant>
		<constant name="DEBUG_DRAW_INTERNAL_BUFFER" value="19" enum="DebugDraw">
			Draws the internal resolution buffer of the scene before post-processing is applied.
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST" value="0" enum="DefaultCanvasItemTextureFilter">
			The texture filter reads from the nearest pixel only. This makes the texture look pixelated from up close, and grainy from a distance (due to mipmaps not being sampled).
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR" value="1" enum="DefaultCanvasItemTextureFilter">
			The texture filter blends between the nearest 4 pixels. This makes the texture look smooth from up close, and grainy from a distance (due to mipmaps not being sampled).
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS" value="2" enum="DefaultCanvasItemTextureFilter">
			The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps (or uses the nearest mipmap if [member ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter] is [code]true[/code]). This makes the texture look smooth from up close, and smooth from a distance.
			Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to [Camera2D] zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels.
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS" value="3" enum="DefaultCanvasItemTextureFilter">
			The texture filter reads from the nearest pixel and blends between the nearest 2 mipmaps (or uses the nearest mipmap if [member ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter] is [code]true[/code]). This makes the texture look pixelated from up close, and smooth from a distance.
			Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to [Camera2D] zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels.
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX" value="4" enum="DefaultCanvasItemTextureFilter">
			Max value for [enum DefaultCanvasItemTextureFilter] enum.
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED" value="0" enum="DefaultCanvasItemTextureRepeat">
			Disables textures repeating. Instead, when reading UVs outside the 0-1 range, the value will be clamped to the edge of the texture, resulting in a stretched out look at the borders of the texture.
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED" value="1" enum="DefaultCanvasItemTextureRepeat">
			Enables the texture to repeat when UV coordinates are outside the 0-1 range. If using one of the linear filtering modes, this can result in artifacts at the edges of a texture when the sampler filters across the edges of the texture.
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR" value="2" enum="DefaultCanvasItemTextureRepeat">
			Flip the texture when repeating so that the edge lines up instead of abruptly changing.
		</constant>
		<constant name="DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX" value="3" enum="DefaultCanvasItemTextureRepeat">
			Max value for [enum DefaultCanvasItemTextureRepeat] enum.
		</constant>
		<constant name="SDF_OVERSIZE_100_PERCENT" value="0" enum="SDFOversize">
		</constant>
		<constant name="SDF_OVERSIZE_120_PERCENT" value="1" enum="SDFOversize">
		</constant>
		<constant name="SDF_OVERSIZE_150_PERCENT" value="2" enum="SDFOversize">
		</constant>
		<constant name="SDF_OVERSIZE_200_PERCENT" value="3" enum="SDFOversize">
		</constant>
		<constant name="SDF_OVERSIZE_MAX" value="4" enum="SDFOversize">
		</constant>
		<constant name="SDF_SCALE_100_PERCENT" value="0" enum="SDFScale">
		</constant>
		<constant name="SDF_SCALE_50_PERCENT" value="1" enum="SDFScale">
		</constant>
		<constant name="SDF_SCALE_25_PERCENT" value="2" enum="SDFScale">
		</constant>
		<constant name="SDF_SCALE_MAX" value="3" enum="SDFScale">
		</constant>
	</constants>
</class>
