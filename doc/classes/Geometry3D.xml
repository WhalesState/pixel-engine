<?xml version="1.0" encoding="UTF-8" ?>
<class name="Geometry3D" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Provides methods for some common 3D geometric operations.
	</brief_description>
	<description>
		Provides a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations in 3D.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_closest_point_to_segment">
			<return type="Vector3" />
			<param index="0" name="point" type="Vector3" />
			<param index="1" name="s1" type="Vector3" />
			<param index="2" name="s2" type="Vector3" />
			<description>
				Returns the 3D point on the 3D segment ([param s1], [param s2]) that is closest to [param point]. The returned point will always be inside the specified segment.
			</description>
		</method>
		<method name="get_closest_point_to_segment_uncapped">
			<return type="Vector3" />
			<param index="0" name="point" type="Vector3" />
			<param index="1" name="s1" type="Vector3" />
			<param index="2" name="s2" type="Vector3" />
			<description>
				Returns the 3D point on the 3D line defined by ([param s1], [param s2]) that is closest to [param point]. The returned point can be inside the segment ([param s1], [param s2]) or outside of it, i.e. somewhere on the line extending from the segment.
			</description>
		</method>
		<method name="get_closest_points_between_segments">
			<return type="PackedVector3Array" />
			<param index="0" name="p1" type="Vector3" />
			<param index="1" name="p2" type="Vector3" />
			<param index="2" name="q1" type="Vector3" />
			<param index="3" name="q2" type="Vector3" />
			<description>
				Given the two 3D segments ([param p1], [param p2]) and ([param q1], [param q2]), finds those two points on the two segments that are closest to each other. Returns a [PackedVector3Array] that contains this point on ([param p1], [param p2]) as well the accompanying point on ([param q1], [param q2]).
			</description>
		</method>
		<method name="ray_intersects_triangle">
			<return type="Variant" />
			<param index="0" name="from" type="Vector3" />
			<param index="1" name="dir" type="Vector3" />
			<param index="2" name="a" type="Vector3" />
			<param index="3" name="b" type="Vector3" />
			<param index="4" name="c" type="Vector3" />
			<description>
				Tests if the 3D ray starting at [param from] with the direction of [param dir] intersects the triangle specified by [param a], [param b] and [param c]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, returns [code]null[/code].
			</description>
		</method>
		<method name="segment_intersects_triangle">
			<return type="Variant" />
			<param index="0" name="from" type="Vector3" />
			<param index="1" name="to" type="Vector3" />
			<param index="2" name="a" type="Vector3" />
			<param index="3" name="b" type="Vector3" />
			<param index="4" name="c" type="Vector3" />
			<description>
				Tests if the segment ([param from], [param to]) intersects the triangle [param a], [param b], [param c]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, returns [code]null[/code].
			</description>
		</method>
	</methods>
</class>
