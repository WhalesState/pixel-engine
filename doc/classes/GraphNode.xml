<?xml version="1.0" encoding="UTF-8" ?>
<class name="GraphNode" inherits="Container" is_experimental="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A container with connection ports, representing a node in a [GraphEdit].
	</brief_description>
	<description>
		[GraphNode] allows to create nodes for a [GraphEdit] graph with customizable content based on its child controls. [GraphNode] is derived from [Container] and it is responsible for placing its children on screen. This works similar to [VBoxContainer]. Children, in turn, provide [GraphNode] with so-called slots, each of which can have a connection port on either side.
		Each [GraphNode] slot is defined by its index and can provide the node with up to two ports: one on the left, and one on the right. By convention the left port is also referred to as the [b]input port[/b] and the right port is referred to as the [b]output port[/b]. Each port can be enabled and configured individually, using different type and color. The type is an arbitrary value that you can define using your own considerations. The parent [GraphEdit] will receive this information on each connect and disconnect request.
		Slots can be configured in the Inspector dock once you add at least one child [Control]. The properties are grouped by each slot's index in the "Slot" section.
		[b]Note:[/b] While GraphNode is set up using slots and slot indices, connections are made between the ports which are enabled. Because of that, [GraphEdit] uses the port's index and not the slot's index. You can use [method get_connection_input_slot] and [method get_connection_output_slot] to get the slot index from the port index.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_all_slots">
			<return type="void" />
			<description>
				Disables all input and output slots of the GraphNode.
			</description>
		</method>
		<method name="clear_slot">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Disables input and output slot whose index is [param slot_index].
			</description>
		</method>
		<method name="get_connection_input_color">
			<return type="Color" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the [Color] of the input connection [param port].
			</description>
		</method>
		<method name="get_connection_input_count">
			<return type="int" />
			<description>
				Returns the number of enabled input slots (connections) to the GraphNode.
			</description>
		</method>
		<method name="get_connection_input_height">
			<return type="int" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the height of the input connection [param port].
			</description>
		</method>
		<method name="get_connection_input_position">
			<return type="Vector2" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the position of the input connection [param port].
			</description>
		</method>
		<method name="get_connection_input_slot">
			<return type="int" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the corresponding slot index of the input connection [param port].
			</description>
		</method>
		<method name="get_connection_input_type">
			<return type="int" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the type of the input connection [param port].
			</description>
		</method>
		<method name="get_connection_output_color">
			<return type="Color" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the [Color] of the output connection [param port].
			</description>
		</method>
		<method name="get_connection_output_count">
			<return type="int" />
			<description>
				Returns the number of enabled output slots (connections) of the GraphNode.
			</description>
		</method>
		<method name="get_connection_output_height">
			<return type="int" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the height of the output connection [param port].
			</description>
		</method>
		<method name="get_connection_output_position">
			<return type="Vector2" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the position of the output connection [param port].
			</description>
		</method>
		<method name="get_connection_output_slot">
			<return type="int" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the corresponding slot index of the output connection [param port].
			</description>
		</method>
		<method name="get_connection_output_type">
			<return type="int" />
			<param index="0" name="port" type="int" />
			<description>
				Returns the type of the output connection [param port].
			</description>
		</method>
		<method name="get_slot_color_left" qualifiers="const">
			<return type="Color" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Returns the left (input) [Color] of the slot [param slot_index].
			</description>
		</method>
		<method name="get_slot_color_right" qualifiers="const">
			<return type="Color" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Returns the right (output) [Color] of the slot [param slot_index].
			</description>
		</method>
		<method name="get_slot_type_left" qualifiers="const">
			<return type="int" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Returns the left (input) type of the slot [param slot_index].
			</description>
		</method>
		<method name="get_slot_type_right" qualifiers="const">
			<return type="int" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Returns the right (output) type of the slot [param slot_index].
			</description>
		</method>
		<method name="is_slot_draw_stylebox" qualifiers="const">
			<return type="bool" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Returns true if the background [StyleBox] of the slot [param slot_index] is drawn.
			</description>
		</method>
		<method name="is_slot_enabled_left" qualifiers="const">
			<return type="bool" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Returns [code]true[/code] if left (input) side of the slot [param slot_index] is enabled.
			</description>
		</method>
		<method name="is_slot_enabled_right" qualifiers="const">
			<return type="bool" />
			<param index="0" name="slot_index" type="int" />
			<description>
				Returns [code]true[/code] if right (output) side of the slot [param slot_index] is enabled.
			</description>
		</method>
		<method name="set_slot">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="enable_left_port" type="bool" />
			<param index="2" name="type_left" type="int" />
			<param index="3" name="color_left" type="Color" />
			<param index="4" name="enable_right_port" type="bool" />
			<param index="5" name="type_right" type="int" />
			<param index="6" name="color_right" type="Color" />
			<param index="7" name="custom_icon_left" type="Texture2D" default="null" />
			<param index="8" name="custom_icon_right" type="Texture2D" default="null" />
			<param index="9" name="draw_stylebox" type="bool" default="true" />
			<description>
				Sets properties of the slot with the [param slot_index] index.
				If [param enable_left_port]/[param enable_right_port] is [code]true[/code], a port will appear and the slot will be able to be connected from this side.
				With [param type_left]/[param type_right] an arbitrary type can be assigned to each port. Two ports can be connected if they share the same type, or if the connection between their types is allowed in the parent [GraphEdit] (see [method GraphEdit.add_valid_connection_type]). Keep in mind that the [GraphEdit] has the final say in accepting the connection. Type compatibility simply allows the [signal GraphEdit.connection_request] signal to be emitted.
				Ports can be further customized using [param color_left]/[param color_right] and [param custom_icon_left]/[param custom_icon_right]. The color parameter adds a tint to the icon. The custom icon can be used to override the default port dot.
				Additionally, [param draw_stylebox] can be used to enable or disable drawing of the background stylebox for each slot. See [theme_item slot].
				Individual properties can also be set using one of the [code]set_slot_*[/code] methods.
				[b]Note:[/b] This method only sets properties of the slot. To create the slot itself, add a [Control]-derived child to the GraphNode.
			</description>
		</method>
		<method name="set_slot_color_left">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="color" type="Color" />
			<description>
				Sets the [Color] of the left (input) side of the slot [param slot_index] to [param color].
			</description>
		</method>
		<method name="set_slot_color_right">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="color" type="Color" />
			<description>
				Sets the [Color] of the right (output) side of the slot [param slot_index] to [param color].
			</description>
		</method>
		<method name="set_slot_draw_stylebox">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="enable" type="bool" />
			<description>
				Toggles the background [StyleBox] of the slot [param slot_index].
			</description>
		</method>
		<method name="set_slot_enabled_left">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="enable" type="bool" />
			<description>
				Toggles the left (input) side of the slot [param slot_index]. If [param enable] is [code]true[/code], a port will appear on the left side and the slot will be able to be connected from this side.
			</description>
		</method>
		<method name="set_slot_enabled_right">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="enable" type="bool" />
			<description>
				Toggles the right (output) side of the slot [param slot_index]. If [param enable] is [code]true[/code], a port will appear on the right side and the slot will be able to be connected from this side.
			</description>
		</method>
		<method name="set_slot_type_left">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="type" type="int" />
			<description>
				Sets the left (input) type of the slot [param slot_index] to [param type]. If the value is negative, all connections will be disallowed to be created via user inputs.
			</description>
		</method>
		<method name="set_slot_type_right">
			<return type="void" />
			<param index="0" name="slot_index" type="int" />
			<param index="1" name="type" type="int" />
			<description>
				Sets the right (output) type of the slot [param slot_index] to [param type]. If the value is negative, all connections will be disallowed to be created via user inputs.
			</description>
		</method>
	</methods>
	<members>
		<member name="draggable" type="bool" setter="set_draggable" getter="is_draggable" default="true">
			If [code]true[/code], the user can drag the GraphNode.
		</member>
		<member name="language" type="String" setter="set_language" getter="get_language" default="&quot;&quot;">
			Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
		</member>
		<member name="mouse_filter" type="int" setter="set_mouse_filter" getter="get_mouse_filter" overrides="Control" enum="Control.MouseFilter" default="0" />
		<member name="overlay" type="int" setter="set_overlay" getter="get_overlay" enum="GraphNode.Overlay" default="0">
			Sets the overlay shown above the GraphNode. See [enum Overlay].
		</member>
		<member name="position_offset" type="Vector2" setter="set_position_offset" getter="get_position_offset" default="Vector2(0, 0)">
			The offset of the GraphNode, relative to the scroll offset of the [GraphEdit].
			[b]Note:[/b] You cannot use position offset directly, as [GraphEdit] is a [Container].
		</member>
		<member name="resizable" type="bool" setter="set_resizable" getter="is_resizable" default="false">
			If [code]true[/code], the user can resize the GraphNode.
			[b]Note:[/b] Dragging the handle will only emit the [signal resize_request] signal, the GraphNode needs to be resized manually.
		</member>
		<member name="selectable" type="bool" setter="set_selectable" getter="is_selectable" default="true">
			If [code]true[/code], the user can select the GraphNode.
		</member>
		<member name="selected" type="bool" setter="set_selected" getter="is_selected" default="false">
			If [code]true[/code], the GraphNode is selected.
		</member>
		<member name="show_close" type="bool" setter="set_show_close_button" getter="is_close_button_visible" default="false">
			If [code]true[/code], the close button will be visible.
			[b]Note:[/b] Pressing it will only emit the [signal close_request] signal, the GraphNode needs to be removed manually.
		</member>
		<member name="text_direction" type="int" setter="set_text_direction" getter="get_text_direction" enum="Control.TextDirection" default="0">
			Base text writing direction.
		</member>
		<member name="title" type="String" setter="set_title" getter="get_title" default="&quot;&quot;">
			The text displayed in the GraphNode's title bar.
		</member>
	</members>
	<signals>
		<signal name="close_request">
			<description>
				Emitted when the GraphNode is requested to be closed. Happens on clicking the close button (see [member show_close]).
			</description>
		</signal>
		<signal name="dragged">
			<param index="0" name="from" type="Vector2" />
			<param index="1" name="to" type="Vector2" />
			<description>
				Emitted when the GraphNode is dragged.
			</description>
		</signal>
		<signal name="node_deselected">
			<description>
				Emitted when the GraphNode is deselected.
			</description>
		</signal>
		<signal name="node_selected">
			<description>
				Emitted when the GraphNode is selected.
			</description>
		</signal>
		<signal name="position_offset_changed">
			<description>
				Emitted when the GraphNode is moved.
			</description>
		</signal>
		<signal name="raise_request">
			<description>
				Emitted when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode.
			</description>
		</signal>
		<signal name="resize_request">
			<param index="0" name="new_minsize" type="Vector2" />
			<description>
				Emitted when the GraphNode is requested to be resized. Happens on dragging the resizer handle (see [member resizable]).
			</description>
		</signal>
		<signal name="slot_updated">
			<param index="0" name="idx" type="int" />
			<description>
				Emitted when any GraphNode's slot is updated.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="OVERLAY_DISABLED" value="0" enum="Overlay">
			No overlay is shown.
		</constant>
		<constant name="OVERLAY_BREAKPOINT" value="1" enum="Overlay">
			Show overlay set in the [theme_item breakpoint] theme property.
		</constant>
		<constant name="OVERLAY_POSITION" value="2" enum="Overlay">
			Show overlay set in the [theme_item position] theme property.
		</constant>
	</constants>
	<theme_items>
		<theme_item name="close_color" data_type="color" type="Color" default="Color(0.875, 0.875, 0.875, 1)">
			The color modulation applied to the close button icon.
		</theme_item>
		<theme_item name="resizer_color" data_type="color" type="Color" default="Color(0.875, 0.875, 0.875, 1)">
			The color modulation applied to the resizer icon.
		</theme_item>
		<theme_item name="title_color" data_type="color" type="Color" default="Color(0.875, 0.875, 0.875, 1)">
			Color of the title text.
		</theme_item>
		<theme_item name="close_h_offset" data_type="constant" type="int" default="12">
		</theme_item>
		<theme_item name="close_offset" data_type="constant" type="int" default="22">
			The vertical offset of the close button.
		</theme_item>
		<theme_item name="port_offset" data_type="constant" type="int" default="0">
			Horizontal offset for the ports.
		</theme_item>
		<theme_item name="separation" data_type="constant" type="int" default="2">
			The vertical distance between ports.
		</theme_item>
		<theme_item name="title_h_offset" data_type="constant" type="int" default="0">
			Horizontal offset of the title text.
		</theme_item>
		<theme_item name="title_offset" data_type="constant" type="int" default="26">
			Vertical offset of the title text.
		</theme_item>
		<theme_item name="title_font" data_type="font" type="Font">
			Font used for the title text.
		</theme_item>
		<theme_item name="close" data_type="icon" type="Texture2D">
			The icon for the close button, visible when [member show_close] is enabled.
		</theme_item>
		<theme_item name="port" data_type="icon" type="Texture2D">
			The icon used for representing ports.
		</theme_item>
		<theme_item name="resizer" data_type="icon" type="Texture2D">
			The icon used for resizer, visible when [member resizable] is enabled.
		</theme_item>
		<theme_item name="breakpoint" data_type="style" type="StyleBox">
			The background used when [member overlay] is set to [constant OVERLAY_BREAKPOINT].
		</theme_item>
		<theme_item name="frame" data_type="style" type="StyleBox">
			The default background for [GraphNode].
		</theme_item>
		<theme_item name="position" data_type="style" type="StyleBox">
			The background used when [member overlay] is set to [constant OVERLAY_POSITION].
		</theme_item>
		<theme_item name="selected_frame" data_type="style" type="StyleBox">
			The background used when the [GraphNode] is selected.
		</theme_item>
		<theme_item name="slot" data_type="style" type="StyleBox">
			The [StyleBox] used for each slot of the [GraphNode].
		</theme_item>
	</theme_items>
</class>
